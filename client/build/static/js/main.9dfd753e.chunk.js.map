{"version":3,"sources":["routes/routes.js","routes/PrivateRoute.js","routes/PublicRoute.js","components/Preloader/Preloader.js","components/Header/Header.js","components/Footer/Footer.js","App.js","reportWebVitals.js","redux/store.js","index.js","redux/auth/authActions.js","redux/auth/authReducer.js","redux/auth/authOperations.js","redux/auth/authSelectors.js"],"names":["connect","state","isAuthenticated","authSelectors","getIsAuthenticated","Component","component","redirectTo","routeProps","render","props","to","restricted","Preloader","className","type","color","height","width","timeout","Header","useState","collapsed","setCollapsed","useSelector","userName","getUserName","token","auth","useEffect","dispatch","useDispatch","toggleNavbar","Navbar","light","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","style","textDecoration","authOperations","logOut","exact","NavLink","Footer","position","left","bottom","margin","target","homeView","lazy","regView","loginView","userView","App","autoClose","fallback","path","routes","public","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","devTools","process","persistor","persistStore","history","createBrowserHistory","ReactDOM","loading","document","getElementById","registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","name","secondName","email","password","birthdate","user","createReducer","authActions","_","payload","setError","error","combineReducers","axios","defaults","baseURL","headers","common","Authorization","register","credentials","a","console","log","post","response","data","toast","success","message","includes","persistedToken","logIn","getCurrentUser","getState","get","getUserSecondname","getUserEmail","getUserPassword","getUserBirthdate"],"mappings":"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","file":"static/js/main.9dfd753e.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nexport default {\r\n  homeView: \"/\",\r\n  registerPage: \"/register\",\r\n  loginPage: \"/login\",\r\n  userPage: \"/user\",\r\n};\r\n","/* eslint-disable no-unused-vars */\r\nimport React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { authSelectors } from \"../redux/auth\";\r\n\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n      {...routeProps}\r\n      render={props =>\r\n          isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n      }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { authSelectors } from \"../redux/auth\";\r\n\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={(props) =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst Preloader = () => (\r\n  <Loader\r\n    className=\"loader\"\r\n    type=\"TailSpin\"\r\n    color=\"grey\"\r\n    height={50}\r\n    width={50}\r\n    timeout={2000}\r\n  />\r\n);\r\n\r\nexport default Preloader;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\nimport { NavLink as NavLinkRoute } from \"react-router-dom\";\r\nimport { FiHome } from \"react-icons/fi\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { authSelectors, authOperations } from \"../../redux/auth\";\r\n\r\nconst Header = (props) => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n  let isAuthenticated = useSelector((state) =>\r\n    authSelectors.getIsAuthenticated(state)\r\n  );\r\n\r\n  let userName = useSelector((state) =>\r\n  authSelectors.getUserName(state)\r\n);\r\n\r\n  const token = useSelector (({auth}) => auth.token);\r\n\r\n  useEffect(() => {\r\n    // isAuthenticated = !isAuthenticated;\r\n  }, [isAuthenticated]);\r\n\r\n  const dispatch = useDispatch();\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n  const onLogout = () => {\r\n    dispatch(authOperations.logOut(token));\r\n    // console.log(token);\r\n    // isAuthenticated = !isAuthenticated;\r\n    toggleNavbar(); \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar\r\n        className=\"mx-3\"\r\n        color=\"faded\"\r\n        light\r\n        isAuthenticated={isAuthenticated}\r\n      >\r\n        <NavbarBrand href=\"/\" className=\"mr-auto\">\r\n          <FiHome color=\"faded\" />\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n            {isAuthenticated ? (\r\n              <NavItem>\r\n                <h4>You logged as {userName}</h4>\r\n                <NavLinkRoute\r\n                  style={{ textDecoration: \"none\" }}\r\n                  to=\"/\"\r\n                  onClick={onLogout}\r\n                  exact\r\n                >\r\n                  <NavLink>Logout</NavLink>\r\n                </NavLinkRoute>\r\n              </NavItem>\r\n            ) : (\r\n              <>\r\n                <NavItem>\r\n                  <NavLinkRoute\r\n                    style={{ textDecoration: \"none\" }}\r\n                    to=\"/register\"\r\n                    exact\r\n                  >\r\n                    <NavLink onClick = {toggleNavbar}>Register</NavLink>\r\n                  </NavLinkRoute>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLinkRoute style={{ textDecoration: \"none\" }} to=\"/login\">\r\n                    <NavLink onClick = {toggleNavbar}>Login</NavLink>\r\n                  </NavLinkRoute>\r\n                </NavItem>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { NavLink } from \"reactstrap\";\r\nimport { FiLinkedin } from \"react-icons/fi\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        left: \"0px\",\r\n        bottom: \"0px\",\r\n        height: \"30px\",\r\n        width: \"100%\",\r\n        textDecoration: \"none\",\r\n        margin: \"15px\",\r\n      }}\r\n    >\r\n      <NavLink\r\n        href=\"https://www.linkedin.com/in/vitalii-chervonyi/\"\r\n        target=\"_blank\"\r\n        color=\"faded\"\r\n      >\r\n        {/* <FiLinkedin /> */}\r\n      </NavLink>\r\n      <FiLinkedin />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport \"./App.css\";\r\nimport React, { Suspense, lazy } from \"react\";\r\n\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport routes from \"./routes/routes\";\r\nimport PrivateRoute from \"./routes/PrivateRoute\";\r\nimport PublicRoute from \"./routes/PublicRoute\";\r\n\r\nimport { useSelector} from \"react-redux\";\r\nimport { authSelectors} from \"./redux/auth\";\r\n\r\nimport Preloader from \"./components/Preloader/Preloader\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Footer from \"./components/Footer/Footer\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst homeView = lazy(() => import(\"./views/Main\"));\r\nconst regView = lazy(() => import(\"./views/Register\"));\r\nconst loginView = lazy(() => import(\"./views/Login\"));\r\nconst userView = lazy(() => import(\"./views/User\"));\r\n\r\nfunction App() {\r\n  let isAuthenticated = useSelector((state) =>\r\n  authSelectors.getIsAuthenticated(state)\r\n);\r\n  return (\r\n    <div className=\"App\">\r\n      <ToastContainer autoClose={2000} />\r\n      <header>\r\n        <Header />\r\n      </header>\r\n      <main>\r\n        <Suspense fallback={<Preloader />}>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              redirectTo=\"/\"\r\n              path={routes.homeView}\r\n              component={homeView}\r\n            />\r\n            <PublicRoute\r\n              public\r\n              redirectTo=\"/login\"\r\n              path={routes.loginPage}\r\n              component={loginView}\r\n            />\r\n            <PublicRoute\r\n              public\r\n              redirectTo=\"/register\"\r\n              path={routes.registerPage}\r\n              component={regView}\r\n            />\r\n            <PrivateRoute\r\n              redirectTo='/user'\r\n              path={routes.userPage}\r\n              component={userView}\r\n              isAuthenticated={isAuthenticated}\r\n            />\r\n            <Redirect to={routes.homeView} />\r\n          </Switch>\r\n        </Suspense>\r\n      </main>\r\n      <footer>\r\n        <Footer />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport { authReducer } from \"./auth\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: \"auth\",\r\n  storage,\r\n  whitelist: [\"token\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n  },\r\n  // loading,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Router } from \"react-router-dom\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport store from \"./redux/store\";\r\nconst history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <Provider store={store.store}>\r\n    <PersistGate loading={null} persistor={store.persistor}>\r\n      <BrowserRouter>\r\n        <Router history={history}>\r\n          <App />\r\n        </Router>\r\n      </BrowserRouter>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst registerRequest = createAction(\"auth/registerRequest\");\r\nconst registerSuccess = createAction(\"auth/registerSuccess\");\r\nconst registerError = createAction(\"auth/registerError\");\r\n\r\nconst loginRequest = createAction(\"auth/loginRequest\");\r\nconst loginSuccess = createAction(\"auth/loginSuccess\");\r\nconst loginError = createAction(\"auth/loginError\");\r\n\r\nconst logoutRequest = createAction(\"auth/logoutRequest\");\r\nconst logoutSuccess = createAction(\"auth/logoutSuccess\");\r\nconst logoutError = createAction(\"auth/logoutError\");\r\n\r\nconst getCurrentUserRequest = createAction(\"auth/getCurrentUserRequest\");\r\nconst getCurrentUserSuccess = createAction(\"auth/getCurrentUserSuccess\");\r\nconst getCurrentUserError = createAction(\"auth/getCurrentUserError\");\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport authActions from \"./authActions\";\r\n\r\nconst initialUserState = {\r\n  name: null,\r\n  secondName: null,\r\n  email: null,\r\n  password: null,\r\n  birthdate: null,\r\n};\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});\r\n","import axios from \"axios\";\r\nimport authActions from \"./authActions\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.defaults.baseURL =  \"https://testsigma.herokuapp.com\"; //\"http://localhost:3000\"; \r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = \"\";\r\n  },\r\n};\r\n\r\nconst register = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.registerRequest());\r\n  console.log(credentials);\r\n  try {\r\n    const response = await axios.post(\"/api/users/register\", credentials);\r\n    token.set(response.data.token);\r\n    toast.success(\"You are registered and logged in!\");\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n    if (error.message.includes(\"409\")) {\r\n      toast.error(\"User is already exist!\");\r\n    } else {    \r\n      toast.error(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst logIn = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post(\"/api/users/login\", credentials);\r\n    token.set(response.data.token);\r\n    toast.success(\"You are logged in!\");\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n    if (error.message.includes(\"401\")) {\r\n      toast.error(\"Wrong email or password!\");\r\n    } else { \r\n      toast.error(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst logOut = (persistedToken) => async (dispatch) => {\r\n  dispatch(authActions.logoutRequest());\r\n  try {\r\n    if (!persistedToken) {\r\n      return;\r\n    }\r\n    token.set(persistedToken);\r\n    await axios.post(\"/api/users/logout\");\r\n    toast.success(\"You are logged out!\");\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    toast.error(error.message);\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get(\"/users/current\");\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nexport default { register, logOut, logIn, getCurrentUser };\r\n","const getIsAuthenticated = (state) => state.auth.isAuthenticated;\r\n\r\nconst getUserName = (state) => state.auth.user.name;\r\nconst getUserSecondname = (state) => state.auth.user.secondName;\r\nconst getUserEmail = (state) => state.auth.user.email;\r\nconst getUserPassword = (state) => state.auth.user.password;\r\nconst getUserBirthdate = (state) => state.auth.user.birthdate;\r\n\r\nexport default {\r\n  getIsAuthenticated,\r\n  getUserName,\r\n  getUserSecondname,\r\n  getUserEmail,\r\n  getUserPassword,\r\n  getUserBirthdate,\r\n};\r\n"],"sourceRoot":""}
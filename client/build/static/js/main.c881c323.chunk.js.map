{"version":3,"sources":["routes/routes.js","routes/PrivateRoute.js","routes/PublicRoute.js","components/Preloader/Preloader.js","components/Header/Header.js","components/Footer/Footer.js","App.js","reportWebVitals.js","redux/store.js","index.js","redux/auth/authActions.js","redux/auth/authReducer.js","redux/auth/authOperations.js","redux/auth/authSelectors.js"],"names":["PrivateRoute","Component","component","routeProps","redirectTo","isAuthenticated","useSelector","state","authSelectors","getIsAuthenticated","render","props","connect","restricted","to","Preloader","className","type","color","height","width","timeout","Header","setLoged","useState","collapsed","setCollapsed","useEffect","console","log","dispatch","useDispatch","toggleNavbar","Navbar","light","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","style","textDecoration","authOperations","logOut","exact","NavLink","Footer","position","left","bottom","margin","target","homeView","lazy","regView","loginView","userView","App","history","autoClose","fallback","path","routes","public","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","devTools","process","persistor","persistStore","createBrowserHistory","ReactDOM","loading","document","getElementById","registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","name","secondName","email","password","birthdate","user","createReducer","authActions","_","payload","token","setError","error","combineReducers","axios","defaults","baseURL","headers","common","Authorization","register","credentials","a","post","response","data","toast","success","message","includes","logIn","getCurrentUser","getState","persistedToken","get","getUserName","getUserSecondname","getUserEmail","getUserPassword","getUserBirthdate"],"mappings":"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","file":"static/js/main.c881c323.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nexport default {\r\n  homeView: \"/\",\r\n  registerPage: \"/register\",\r\n  loginPage: \"/login\",\r\n  userPage: \"/user\",\r\n};\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { authSelectors } from \"../redux/auth\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst PrivateRoute = ({ component: Component, redirectTo, ...routeProps }) => {\r\n  const isAuthenticated = useSelector((state) =>\r\n    authSelectors.getIsAuthenticated(state)\r\n  );\r\n  return (\r\n    <Route\r\n      {...routeProps}\r\n      render={(props) =>\r\n        isAuthenticated ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect redirectTo= \"/user\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { authSelectors } from \"../redux/auth\";\r\n\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={(props) =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst Preloader = () => (\r\n  <Loader\r\n    className=\"loader\"\r\n    type=\"TailSpin\"\r\n    color=\"grey\"\r\n    height={50}\r\n    width={50}\r\n    timeout={2000}\r\n    color=\"#3f51b5\"\r\n  />\r\n);\r\n\r\nexport default Preloader;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport routes from \"../../routes/routes\";\r\nimport { NavLink as NavLinkRoute } from \"react-router-dom\";\r\nimport { FiHome } from \"react-icons/fi\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { authSelectors, authOperations } from \"../../redux/auth\";\r\n\r\nconst Header = (props, setLoged) => {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n  let isAuthenticated = useSelector((state) =>\r\n    authSelectors.getIsAuthenticated(state)\r\n  );\r\n  useEffect(() => {\r\n    // setLoged(false);\r\n  }, [isAuthenticated]);\r\n\r\n  console.log(isAuthenticated);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleNavbar = () => setCollapsed(!collapsed);\r\n\r\n  const onLogout = () => {\r\n    dispatch(authOperations.logOut());\r\n    isAuthenticated = false;\r\n    toggleNavbar(); \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar\r\n        className=\"mx-3\"\r\n        color=\"faded\"\r\n        light\r\n        isAuthenticated={isAuthenticated}\r\n      >\r\n        <NavbarBrand href=\"/\" className=\"mr-auto\">\r\n          <FiHome color=\"faded\" />\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav navbar>\r\n            {isAuthenticated ? (\r\n              <NavItem>\r\n                <NavLinkRoute\r\n                  style={{ textDecoration: \"none\" }}\r\n                  to=\"/\"\r\n                  onClick={onLogout}\r\n                  exact\r\n                >\r\n                  <NavLink>Logout</NavLink>\r\n                </NavLinkRoute>\r\n              </NavItem>\r\n            ) : (\r\n              <>\r\n                <NavItem>\r\n                  <NavLinkRoute\r\n                    style={{ textDecoration: \"none\" }}\r\n                    to=\"/register\"\r\n                    exact\r\n                  >\r\n                    <NavLink onClick = {toggleNavbar}>Register</NavLink>\r\n                  </NavLinkRoute>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLinkRoute style={{ textDecoration: \"none\" }} to=\"/login\">\r\n                    <NavLink onClick = {toggleNavbar}>Login</NavLink>\r\n                  </NavLinkRoute>\r\n                </NavItem>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { NavLink, NavItem, Nav } from \"reactstrap\";\r\nimport { FiLinkedin } from \"react-icons/fi\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        left: \"0px\",\r\n        bottom: \"0px\",\r\n        height: \"30px\",\r\n        width: \"100%\",\r\n        textDecoration: \"none\",\r\n        margin: \"15px\",\r\n      }}\r\n    >\r\n      <NavLink\r\n        href=\"https://www.linkedin.com/in/vitalii-chervonyi/\"\r\n        target=\"_blank\"\r\n        color=\"faded\"\r\n      >\r\n        {/* <FiLinkedin /> */}\r\n      </NavLink>\r\n      <FiLinkedin />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport \"./App.css\";\r\nimport React, { useEffect, Suspense, lazy, useState } from \"react\";\r\n\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport routes from \"./routes/routes\";\r\nimport PrivateRoute from \"./routes/PrivateRoute\";\r\nimport PublicRoute from \"./routes/PublicRoute\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { authSelectors, authOperations } from \"./redux/auth\";\r\n\r\nimport Preloader from \"./components/Preloader/Preloader\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Footer from \"./components/Footer/Footer\";\r\n\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst homeView = lazy(() => import(\"./views/Main\"));\r\nconst regView = lazy(() => import(\"./views/Register\"));\r\nconst loginView = lazy(() => import(\"./views/Login\"));\r\nconst userView = lazy(() => import(\"./views/User\"));\r\n\r\nfunction App({ history, redirectTo }) {\r\n  const [loged, setLoged] = useState(true);\r\n  const isAuthenticated = useSelector((state) =>\r\n    authSelectors.getIsAuthenticated(state)\r\n  );\r\n\r\n  // const [fields, setFields] = useState();\r\n  // const dispatch = useDispatch();\r\n// }\r\n  // useEffect(() => {\r\n    // dispatch.authOperations.getCurrentUser();\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ToastContainer autoClose={5000} />\r\n      <header>\r\n        <Header setLoged={setLoged} />\r\n      </header>\r\n      <main>\r\n        <Suspense fallback={<Preloader />}>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              redirectTo=\"/\"\r\n              path={routes.homeView}\r\n              component={homeView}\r\n            />\r\n            <PublicRoute\r\n              public\r\n              redirectTo=\"/login\"\r\n              path={routes.loginPage}\r\n              component={loginView}\r\n            />\r\n            <PublicRoute\r\n              public\r\n              redirectTo=\"/register\"\r\n              path={routes.registerPage}\r\n              component={regView}\r\n            />\r\n            <PrivateRoute\r\n              to={redirectTo}\r\n              path={routes.userPage}\r\n              component={userView}\r\n            />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </Suspense>\r\n      </main>\r\n      <footer>\r\n        <Footer />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport { authReducer } from \"./auth\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: \"auth\",\r\n  storage,\r\n  whitelist: [\"token\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n  },\r\n  // loading,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nimport store from \"./redux/store\";\r\nconst history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <Provider store={store.store}>\r\n    <PersistGate loading={null} persistor={store.persistor}>\r\n      <Router history={history}>\r\n        <App />\r\n      </Router>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst registerRequest = createAction(\"auth/registerRequest\");\r\nconst registerSuccess = createAction(\"auth/registerSuccess\");\r\nconst registerError = createAction(\"auth/registerError\");\r\n\r\nconst loginRequest = createAction(\"auth/loginRequest\");\r\nconst loginSuccess = createAction(\"auth/loginSuccess\");\r\nconst loginError = createAction(\"auth/loginError\");\r\n\r\nconst logoutRequest = createAction(\"auth/logoutRequest\");\r\nconst logoutSuccess = createAction(\"auth/logoutSuccess\");\r\nconst logoutError = createAction(\"auth/logoutError\");\r\n\r\nconst getCurrentUserRequest = createAction(\"auth/getCurrentUserRequest\");\r\nconst getCurrentUserSuccess = createAction(\"auth/getCurrentUserSuccess\");\r\nconst getCurrentUserError = createAction(\"auth/getCurrentUserError\");\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport authActions from \"./authActions\";\r\n\r\nconst initialUserState = {\r\n  name: null,\r\n  secondName: null,\r\n  email: null,\r\n  password: null,\r\n  birthdate: null,\r\n};\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});\r\n","import axios from \"axios\";\r\nimport authActions from \"./authActions\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\n\r\naxios.defaults.baseURL = \"https://testsigma.herokuapp.com\" //\"http://localhost:3000\";\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = \"\";\r\n  },\r\n};\r\n\r\nconst register = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.registerRequest());\r\n  try {\r\n    const response = await axios.post(\"/api/users/register\", credentials);\r\n    token.set(response.data.token);\r\n    toast.success(\"You are registered!\");\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n    if (error.message.includes(\"409\")) {\r\n      toast.error(\"User is already exist!\");\r\n    } else {    \r\n      toast.error(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst logIn = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post(\"/api/users/login\", credentials);\r\n    token.set(response.data.token);\r\n    toast.success(\"You are logged in!\");\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n    if (error.message.includes(\"401\")) {\r\n      toast.error(\"Wrong email or password!\");\r\n    } else { \r\n      toast.error(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst logOut = () => async (dispatch) => {\r\n  dispatch(authActions.logoutRequest());\r\n  try {\r\n    await axios.post(\"/api/users/logout\");\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n    console.log(\"ok\")\r\n  } catch (error) {\r\n    console.log(\r\n      \"Добавить уведомление об ошибке выхода и ее причине(из ответа сервера)\",\r\n      error.message\r\n    );\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get(\"/users/current\");\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nexport default { register, logOut, logIn, getCurrentUser };\r\n","const getIsAuthenticated = (state) => state.auth.isAuthenticated;\r\n\r\nconst getUserName = (state) => state.auth.user.name;\r\nconst getUserSecondname = (state) => state.auth.user.secondName;\r\nconst getUserEmail = (state) => state.auth.user.email;\r\nconst getUserPassword = (state) => state.auth.user.password;\r\nconst getUserBirthdate = (state) => state.auth.user.birthdate;\r\n\r\nexport default {\r\n  getIsAuthenticated,\r\n  getUserName,\r\n  getUserSecondname,\r\n  getUserEmail,\r\n  getUserPassword,\r\n  getUserBirthdate,\r\n};\r\n"],"sourceRoot":""}
{"version":3,"sources":["views/User.js","hoc/withForm.js","components/FormImage/FormImage.js","core/utils/validator.js","views/Register.js"],"names":["User","withFrom","formHeading","WrappedForm","nameFieldRender","secondNameFieldRender","emailFieldRender","passwordFieldRender","birthdateFieldRender","props","useState","setIsLoading","isError","FormImage","name","setName","secondName","setSecondName","email","setEmail","password","setPassword","birthdate","setBirthdate","dispatch","useDispatch","handleChange","e","target","value","Container","Form","onSubmit","preventDefault","schema","passwordValidator","is","min","validate","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","isEnoughLongPassword","has","uppercase","isIncludeUppercaseLetters","digits","isIncludeDigits","authOperations","register","logIn","FormGroup","Input","className","type","id","placeholder","onChange","required","Button","Register","WithFormRegister","withForm"],"mappings":"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","file":"static/js/5.1eee14e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst User = () => {\r\n  return (\r\n    <>\r\n      <h1>User private page</h1>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from \"react\";\r\n\r\nconst withFrom = (\r\n  formHeading,\r\n  WrappedForm,\r\n  nameFieldRender,\r\n  secondNameFieldRender,\r\n  emailFieldRender,\r\n  passwordFieldRender,\r\n  birthdateFieldRender\r\n) => {\r\n  return (props) => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    return (\r\n      <WrappedForm\r\n        {...props}\r\n        formHeading={formHeading}\r\n        setIsLoading={setIsLoading}\r\n        isError={isError}\r\n        nameFieldRender={nameFieldRender}\r\n        secondNameFieldRender={secondNameFieldRender}\r\n        emailFieldRender={emailFieldRender}\r\n        passwordFieldRender={passwordFieldRender}\r\n        birthdateFieldRender={birthdateFieldRender}\r\n      />\r\n    );\r\n  };\r\n};\r\n\r\nexport default withFrom;\r\n","/* eslint-disable default-case */\r\n/* eslint-disable no-unused-vars */\r\nimport React, { useState } from \"react\";\r\nimport { Container, Button, Form, FormGroup, Input } from \"reactstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { authOperations } from \"../../redux/auth\";\r\nimport { withRouter } from \"react-router\";\r\nimport UserPage from \"../../views/User\"\r\nimport {isEnoughLongPassword, isIncludeUppercaseLetters, isIncludeDigits} from \"../../core/utils/validator\"\r\n\r\nconst FormImage = ({\r\n  formHeading,\r\n  nameFieldRender,\r\n  secondNameFieldRender,\r\n  emailFieldRender,\r\n  passwordFieldRender,\r\n  birthdateFieldRender,\r\n  isError,\r\n  setIsLoading,\r\n}) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [secondName, setSecondName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [birthdate, setBirthdate] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"secondName\":\r\n        setSecondName(value);\r\n        break;\r\n\r\n      case \"email\":\r\n        setEmail(value);\r\n        break;\r\n\r\n      case \"password\":\r\n        setPassword(value);\r\n        break;\r\n\r\n      case \"birthdate\":\r\n        setBirthdate(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const userInfo = {\r\n      name,\r\n      secondName,\r\n      email,\r\n      password,\r\n      birthdate,\r\n    };\r\n\r\n    setName(name);\r\n    setSecondName(secondName);\r\n    setEmail(email);\r\n    setBirthdate(birthdate);\r\n\r\n    switch (formHeading) {\r\n      case \"Registration\":\r\n        if (isEnoughLongPassword(password) === true \r\n          && isIncludeUppercaseLetters(password) === true \r\n          && isIncludeDigits(password)\r\n        ) {\r\n          setPassword(password);\r\n          dispatch(\r\n            authOperations.register({\r\n              name,\r\n              secondName,\r\n              email,\r\n              password,\r\n              birthdate,\r\n            })\r\n          )\r\n        }\r\n        break;\r\n\r\n      case \"Login\":\r\n        setPassword(password);\r\n        dispatch(\r\n          authOperations.logIn({\r\n            email,\r\n            password,\r\n          })\r\n        );\r\n        // withRouter(UserPage);\r\n        break;\r\n    }\r\n\r\n    // setName(\"\");\r\n    // setSecondName(\"\");\r\n    // setEmail(\"\");\r\n    // setPassword(\"\");\r\n    // setBirthdate(\"\");\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form onSubmit={handleSubmit}>\r\n        {nameFieldRender && (\r\n          <FormGroup>\r\n            <Input\r\n              className=\"mblank-2 my-2 w-320\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              id=\"name\"\r\n              placeholder=\"Name\"\r\n              onChange={handleChange}\r\n            />\r\n          </FormGroup>\r\n        )}\r\n        {secondNameFieldRender && (\r\n          <FormGroup>\r\n            <Input\r\n              className=\"mblank-2 my-2\"\r\n              type=\"text\"\r\n              name=\"secondName\"\r\n              value={secondName}\r\n              id=\"secondname\"\r\n              placeholder=\"Second name\"\r\n              onChange={handleChange}\r\n            />\r\n          </FormGroup>\r\n        )}\r\n        {emailFieldRender && (\r\n          <FormGroup>\r\n            <Input\r\n              className=\"mblank-2 my-2\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              id=\"email\"\r\n              placeholder=\"Email\"\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </FormGroup>\r\n        )}\r\n        {passwordFieldRender && (\r\n          <FormGroup>\r\n            <Input\r\n              className=\"mblank-2 my-2\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              id=\"Password\"\r\n              placeholder=\"Password \"\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </FormGroup>\r\n        )}\r\n        {birthdateFieldRender && (\r\n          <FormGroup>\r\n            <Input\r\n              className=\"mblank-2 my-2\"\r\n              type=\"date\"\r\n              name=\"birthdate\"\r\n              value={birthdate}\r\n              id=\"birthdate\"\r\n              placeholder=\"Birthdate\"\r\n              onChange={handleChange}\r\n            />\r\n          </FormGroup>\r\n        )}\r\n        <Button className=\"m-3\">{formHeading}</Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormImage;\r\n","import passwordValidator from 'password-validator'\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst isEnoughLongPassword = (password) => {\r\n    let schema = new passwordValidator();\r\n    schema.is().min(8)\r\n    if (!schema.validate(password)) {\r\n        toast.error('Password must be longer than 8 characters', {\r\n            position: \"top-right\",\r\n            autoClose: 10000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst isIncludeUppercaseLetters = (password) => {\r\n    let schema = new passwordValidator();\r\n    schema.is().has().uppercase();\r\n    if (!schema.validate(password)) {\r\n        toast.error('Password must contain uppercase letters', {\r\n            position: \"top-right\",\r\n            autoClose: 10000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst isIncludeDigits = (password) => {\r\n    let schema = new passwordValidator();\r\n    schema.has().digits(2);\r\n    if (!schema.validate(password)) {\r\n        toast.error('Password must contain at least 2 digits', {\r\n            position: \"top-right\",\r\n            autoClose: 10000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n        });\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport {isEnoughLongPassword, isIncludeUppercaseLetters, isIncludeDigits};","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from \"react\";\r\nimport withForm from \"../hoc/withForm\";\r\nimport FormImage from \"../components/FormImage/FormImage\";\r\n\r\nconst Register = () => {\r\n  const [nameFieldRender, setNameFieldRender] = useState(true);\r\n  const [secondNameFieldRender, setSecondNameFieldRender] = useState(true);\r\n  const [emailFieldRender, setEmailFieldRender] = useState(true);\r\n  const [passwordFieldRender, setPasswordFieldRender] = useState(true);\r\n  const [birthdateFieldRender, setBirthdateFieldRender] = useState(true);\r\n\r\n  const WithFormRegister = withForm(\r\n    \"Registration\",\r\n    FormImage,\r\n    nameFieldRender,\r\n    secondNameFieldRender,\r\n    emailFieldRender,\r\n    passwordFieldRender,\r\n    birthdateFieldRender\r\n  );\r\n\r\n  return <WithFormRegister />;\r\n};\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}